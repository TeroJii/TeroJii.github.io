{
  "hash": "e76788657078dfaa501ade512dbbfe49",
  "result": {
    "markdown": "---\ntitle: \"GitHub Copilot with R\"\ndate: \"2023-10-31\"\ncategories: [GitHub Copilot, R, generative AI]\ndescription: 'Are programmers needed anymore?'\ndraft: true\nimage: 'img/AIpairProgrammer.jpg'\n---\n\n\nI've been experimenting on writing R code with the help of GitHub copilot since last week. Marketed as your AI pair programmer, Github copilot helps you write code using generative AI. It can best aid you in the following five tasks:\n\n1) Writing functions\n2) Writing comments\n3) Writing tests\n4) Writing documentation\n5) Writing code\n\n\nThe above five bullets were proposed by copilot itself. Let's take copilot out for a test drive with the `mtcars` data, and see what help it provides for data visualization and wrangling tasks.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\n```\n:::\n\n\n## Visualizing the data\n\nLet's visualize the data with ggplot2 using copilot. We want to plot the mpg as a function hp. We also want to facet the plot by cyl.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  ggplot(aes(x = hp, y = mpg)) +\n  geom_point() +\n  facet_wrap(~ cyl)\n```\n\n::: {.cell-output-display}\n![](07-CoPilot_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nCopilot created a basic visualization of the data with just a few keystrokes, without me needing to write a single line of code.\n\n\nLet's now create a custom function which allows us to also color the points according to one of the following variables in the data set: vs, ab, gear, carb.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_mtcars <- function(x, y, color) {\n  mtcars %>% \n    ggplot(aes(x = {{x}}, y = {{y}}, color = {{color}})) +\n    geom_point() +\n    facet_wrap(~ cyl)\n}\n\n# test the function by plotting mpg as a function of hp, and color by vs\nplot_mtcars(hp, mpg, vs)\n```\n\n::: {.cell-output-display}\n![](07-CoPilot_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nCopilot was able to create the function with a few adjustments to the above text. Pretty cool. The color should really be a factor though. Let's instruct our pair programmer more.\n\nWe want to change the plotting function so that the coloring variable is a factor. We also want to add a title to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# improved function where color is a factor and the user can add a title\nplot_mtcars <- function(x, y, color, title) {\n  mtcars %>% \n    ggplot(aes(x = {{x}}, y = {{y}}, color = factor({{color}}))) +\n    geom_point() +\n    facet_wrap(~ cyl) +\n    labs(title = {{title}})\n}\n\n# test the function by plotting mpg as a function of hp, and color by gear\nplot_mtcars(hp, mpg, gear, \"Plotting mpg as a function of hp, and color by gear\")\n```\n\n::: {.cell-output-display}\n![](07-CoPilot_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nOk, I needed to write a comment above the function to give the user the ability to add the title text. So, with just one small tweak we got what we wanted. Let's now give the steering wheel to copilot and see where it takes us.\n\n> Let's now create a function which allows us to plot the data with a linear regression line. We also want to add a legend to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# improved function where color is a factor and the user can add a title\nplot_mtcars <- function(x, y, color, title) {\n  mtcars %>% \n    ggplot(aes(x = {{x}}, y = {{y}}, color = factor({{color}}))) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    facet_wrap(~ cyl) +\n    labs(title = {{title}})\n}\n\n# test the function by plotting mpg as a function of hp, and color by gear\nplot_mtcars(hp, mpg, gear, \"Plotting mpg as a function of hp, and color by gear\")\n```\n\n::: {.cell-output-display}\n![](07-CoPilot_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nOk, the final suggestion was purely from Github copilot, and it added a linear fit to our plotting function. I'm not sure about the stuff regarding the legend, since our plot included a legend already. Nevertheless, it does seem like copilot can also steer the user with regards the direction of the document / analysis. In this particular case, this is probably not the direction I would have personally taken, but I guess it's not always a bad thing to get some suggestions outside of your self constructed mental box.\n\n## Data wrangling\n\nOne of the places where I've found copilot most useful is in reducing redundant typing. One example would be the creation of conditional data variables. Let's see how copilot can help us in creating a `case_when` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(cyl_factor = case_when(\n    cyl == 4 ~ \"four\",\n    cyl == 6 ~ \"six\",\n    cyl == 8 ~ \"eight\"\n  )) %>%\n  # select only make of the car original cylinder column and the new factor column\n  select(mpg, cyl, cyl_factor) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl cyl_factor\nMazda RX4         21.0   6        six\nMazda RX4 Wag     21.0   6        six\nDatsun 710        22.8   4       four\nHornet 4 Drive    21.4   6        six\nHornet Sportabout 18.7   8      eight\nValiant           18.1   6        six\n```\n:::\n:::\n\n\nOk, cool... we got an example of a `case_when` structure created by copilot. Excluding the select-statement, Github copilot was able to create the above `case_when` example from the natural language description above the code. The select-statement was created by copilot based on the comment I added after the first code suggestion.\n\nEven more complicated `case_when` structures are possible just by describing the structure through some examples. Let's look at one more example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new column based on the carb column values\n# the new column should be called carb_factor\n# if carb has a value of 4 the carb_factor should be \"four carburetors\"\n# Print out the head of the modified data.frame with only the carb and carb_factor columns\n\nmtcars %>% \n  mutate(carb_factor = case_when(\n    carb == 4 ~ \"four carburetors\",\n    carb == 1 ~ \"one carburetor\",\n    carb == 2 ~ \"two carburetors\",\n    carb == 3 ~ \"three carburetors\",\n    carb == 6 ~ \"six carburetors\",\n    carb == 8 ~ \"eight carburetors\"\n  )) %>%\n  select(carb, carb_factor) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  carb      carb_factor\nMazda RX4            4 four carburetors\nMazda RX4 Wag        4 four carburetors\nDatsun 710           1   one carburetor\nHornet 4 Drive       1   one carburetor\nHornet Sportabout    2  two carburetors\nValiant              1   one carburetor\n```\n:::\n:::\n\n\nThe above code was created entirely by copilot based on the comments above the code. Based on my testing so far, I find this one the most useful features of copilot. Sometimes I also let copilot suggest implementations of things I could easily program myself. Occasionally, copilot suggests using functions I might have not thought of using. So, I guess it in a way lives up to the promise of being a pair programmer by broadening my horizons.\n\n## Final thoughts\n\nGithub copilot is not going to replace programmers just yet. Often times it needs the help of a human in breaking down the programming task into smaller pieces. So you need to be able and willing to help copilot help you. Nevertheless, as we saw above, we are not talking about just a glorified auto complete. Copilot is capable of genuinely making some tasks, such as repetitive conditional statements, easier and less laborious to implement. \n\n\nLet's give the final word to copilot: \n\n*Github copilot is not going to replace programmers just yet...*\n\n> However, it can be a useful tool in speeding up the development process. It can also be a useful tool in learning new programming languages. I'm looking forward to seeing how the tool develops in the future.\n\n\n",
    "supporting": [
      "07-CoPilot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}