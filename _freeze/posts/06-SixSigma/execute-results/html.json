{
  "hash": "f7907fde6552b3aee0f5a550b1ee1035",
  "result": {
    "markdown": "---\ntitle: \"Six Sigma tools in R\"\ndate: \"2023-09-29\"\ncategories: [Six Sigma, process improvement, R]\ndescription: 'Improving processes with the help of R'\ndraft: false\n---\n\n\n\nSix Sigma ($6 \\sigma$) is an umbrella term for a set of tools and techniques, which can be used for improving existing processes for example in the manufacturing industry. There are many commercial software packages which offer Six Sigma related statistical quality control tools for analyzing data. Recently I bumped into the [Six Sigma](https://cran.r-project.org/web/packages/SixSigma/index.html) R package, which provides a convenient open source alternative. Let's take a look at a few functions supplied by this package.\n\n## Methodology for improving an existing process\n\nSix Sigma projects often revolve around the **DMAIC** methodology, which stands for **D**efine, **M**easure, **A**nalyze, **I**mprove, and **C**ontrol. These five stages are integral to a Six Sigma project which aims at improving an existing process. Each stage contains a specific set of tools which are used for improving the overall quality.\n\nLet's assume that we have **defined** our project aim as improving the reproducibility of a sawmill production process, where we produce lumber with two different machines which are run by three different machine operators. The `SixSigma` package provides a bunch of handy tools for analyzing the situation. We will take a closer look at the Gage R&R method and the Ishikawa or fishbone diagrams for **measuring** and **analyzing** the project data. Let's start by loading the needed packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(SixSigma)\nlibrary(tidyverse)\n```\n:::\n\n\n## Creating mock data\n\nBefore we can analyze anything, we need to create some mock data. Let's assume that the target of the sawmill cutting process is to produce 24 feet long pieces of lumber. In our imaginary situation, we have the three operators cut 5 pieces of lumber per machine, which we then measure to analyze the consistency of the length of lumber produced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nmachines <- c(\"m #1\", \"m #2\")\noperators <- c(\"op #1\", \"op #2\", \"op #3\")\nruns <- c(\"run #1\", \"run #2\", \"run #3\", \"run #4\", \"run #5\")\n\n# create basic measurement grid\nlumber_df <- expand.grid(\"machine\" = factor(x = machines, levels = machines),\n                         \"operator\" = factor(x = operators, operators),\n                         \"run\" = factor(x = runs, levels = runs))\n\n# generate measurement data\nlumber_df$lumber_length <- rnorm(n = length(lumber_df$machine), mean = 24, sd = 0.03)\n\n# let's create some differences\nlumber_df <- lumber_df |>\n  mutate(\n    lumber_length = case_when(\n      # machine 2 creates slightly longer products\n      machine == \"m #2\" ~ lumber_length + lumber_length * 0.01,\n      # operator 3 has slighty more variation in the outcomes\n      operator == \"op #3\" ~ lumber_length + rnorm(n = 1, mean = 0, sd = 0.035),\n      # keep other values as is\n      TRUE ~ lumber_length\n    )\n  )\n\nhead(lumber_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  machine operator    run lumber_length\n1    m #1    op #1 run #1      23.98319\n2    m #2    op #1 run #1      24.23303\n3    m #1    op #2 run #1      24.04676\n4    m #2    op #2 run #1      24.24214\n5    m #1    op #3 run #1      24.01880\n6    m #2    op #3 run #1      24.29197\n```\n:::\n:::\n\n\n## Using Gage R&R\n\nGage R&R is used to evaluate the repeatability and reproducibility of the lumber cutting process. It helps us measure the performance of the machines and operators. For example, we can determine how much of the variation in the lumber length is due to the sawing machines itself, and how much is due to the actual process variation. The `SixSigma` package provides us with a convenient function `ss.rr()` for performing the analysis. Let's imagine that we wish to keep the lumber within 0.1 feet from the target value. @fig-gage shows the visualization of the Gage R&R results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nss.rr(var = lumber_length, machine, operator, data = lumber_df, \n\tsub = \"Lumber length analysis\", \n\talphaLim = 0.05,\n\terrorTerm = \"interaction\",\n\tlsl = 24 - 0.1,\n\tusl = 24 + 0.1,\n\tmethod = \"crossed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nComplete model (with interaction):\n\n                 Df Sum Sq Mean Sq F value  Pr(>F)\nmachine           1 0.4022  0.4022 651.851 0.00153\noperator          2 0.0018  0.0009   1.451 0.40802\nmachine:operator  2 0.0012  0.0006   0.651 0.53032\nRepeatability    24 0.0227  0.0009                \nTotal            29 0.4279                        \n\nalpha for removing interaction: 0.05 \n\n\nReduced model (without interaction):\n\n              Df Sum Sq Mean Sq F value Pr(>F)\nmachine        1 0.4022  0.4022 436.277 <2e-16\noperator       2 0.0018  0.0009   0.971  0.392\nRepeatability 26 0.0240  0.0009               \nTotal         29 0.4279                       \n\nGage R&R\n\n                       VarComp %Contrib\nTotal Gage R&R    0.0009218159     3.33\n  Repeatability   0.0009218159     3.33\n  Reproducibility 0.0000000000     0.00\n    operator      0.0000000000     0.00\nPart-To-Part      0.0267496612    96.67\nTotal Variation   0.0276714771   100.00\n\n                       VarComp     StdDev  StudyVar %StudyVar %Tolerance\nTotal Gage R&R    0.0009218159 0.03036142 0.1821685     18.25      91.08\n  Repeatability   0.0009218159 0.03036142 0.1821685     18.25      91.08\n  Reproducibility 0.0000000000 0.00000000 0.0000000      0.00       0.00\n    operator      0.0000000000 0.00000000 0.0000000      0.00       0.00\nPart-To-Part      0.0267496612 0.16355324 0.9813194     98.32     490.66\nTotal Variation   0.0276714771 0.16634746 0.9980848    100.00     499.04\n\nNumber of Distinct Categories = 7 \n```\n:::\n\n::: {.cell-output-display}\n![Gage R&R diagram showing that machine \\#2 produces products which are clearly above the target range.](06-SixSigma_files/figure-html/fig-gage-1.png){#fig-gage width=1152}\n:::\n:::\n\n\nWe can see that the function spits out a bunch of statistical results and a fairly nice looking visualization of the main results. Our main takeaway from the outputs is that machine #2 has a statistically significant effect on the length of the boards. Otherwise, it seems that the operators do not have a noticeable impact on the process outcome, which is an indicator of a robust production process.\n\n## Analyzing the potential contributors to `lumber_length`\n\nThe fishbone or Ishikawa diagram can be used to write down and organize the possible causes for the performance differences between the machines and operators. In this case, the difference between the machines was quite obvious. However, we might assume that other factors such as the operators, the type of wood used in cutting, the tool used for measuring the lengths of the boards, and possibly the environment we work in also play a role in the outcome. The fishbone diagram is a convenient graph for visualizing this type of data. We can plot the contributors by using the `ss.ceDiag()` function.\n\n@fig-fishbone shows the results of our brainstorming session. We now have a list of possible contributors to the process, which can help us plan the project further.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neffect <- \"Board length\"\ncauses.gr <- c(\"Machine\", \"Operator\", \"Wood type\", \"Environment\", \"Measurement tool\")\ncauses <- vector(mode = \"list\", length = length(causes.gr))\n\n# possible contributors for different groups\n\n# machine\ncauses[1] <- list(c(\"calibration\", \"blade\", \"conveyor belt\"))\n# operator\ncauses[2] <- list(c(\"operator #1\", \"operator #2\", \"operator #3\"))\n# wood type\ncauses[3] <- list(c(\"tree species\", \"hardness\", \"thickness\"))\n# environment\ncauses[4] <- list(c(\"humidity\", \"cleanliness\"))\n# measurement tool\ncauses[5] <- list(c(\"calibration\", \"producer\", \"type\"))\n\nss.ceDiag(effect, causes.gr, causes, sub = \"Possible contributors to board length\")\n```\n\n::: {.cell-output-display}\n![Fishbone diagram showing possible contributors to the length of boards in a sawmill production process.](06-SixSigma_files/figure-html/fig-fishbone-1.png){#fig-fishbone width=576}\n:::\n:::\n\n\n## Final thoughts\n\nThe `SixSigma` package provides an open source alternative for common statistical and project planning tools used in the **DMAIC** methodology. The functions are well documented and easy to use. Furthermore, the plots provided by the package functions seem nice enough to include directly in reports. Give the package a go if you need to improve processes in a Six Sigma fashion.",
    "supporting": [
      "06-SixSigma_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}