---
title: "Using Docker for Shiny Apps"
date: "2023-12-03"
categories: [Docker, Shiny]
description: 'Containerizing your Shiny apps'
draft: true
---

[Shiny apps](https://shiny.rstudio.com/) are a great way to provide an interactive user interface for exploring data, running models, simulations, and much more. However, writing a Shiny app on your local computer is one thing, but providing it to a customer or colleague in a scalable way requires something more. Enter [Docker](https://www.docker.com/).

What is Docker? Docker provides a way to run your Shiny app inside something called a *container*, which is basically an isolated virtual environment ([read more here](https://www.docker.com/resources/what-container/)). This allows you to share your app via cloud providers such as AWS and Azure. You can also run the container on a local machine, without needing to worry about R installations and other dependencies.

Sounds great. And the best thing is that it is not that difficult to containerize your Shiny app.

## Installing Docker

You will need to install Docker Desktop to get the job done. The installation depends on your operating system, but it should be easy enough for Mac OS, Windows, and Linux as well. [The website](https://www.docker.com/products/docker-desktop/) has detailed instructions to guide you through the process.

<!--
### Installation for Windows

The most convenient way for running Docker on Windows in by installing Docker Desktop. The requirements needed for running this application are listed [here](https://docs.docker.com/desktop/install/windows-install/). For Windows versions 10/11, you will basically need to install WSL 2 to run docker. Look at the link above for detailed instructions.
-->

## Building a Docker image

Now that Docker is up and running we need to create something called a `Dockerfile`. It is needed for building a Docker image of our Shiny app. What is an image then? Image is basically a blueprint for your container. It tells what code should run inside the container, and which dependencies the code has starting from operating system (OS), programming language versions, packages etc. The container itself, is basically a running instance of the said image.

Specifying up everything, starting from the OS, for the Docker image may sound intimidating. Luckily, we do not need to start from zero. Rather, we can build on top of existing images. There are thousands of images readily available in Docker Hub. For R users, several useful images are listed under [rocker](https://hub.docker.com/u/rocker). For Shiny apps, [rocker/shiny](https://hub.docker.com/r/rocker/shiny) and [rocker/shiny-verse](https://hub.docker.com/r/rocker/shiny-verse) are good starting points, which contain everything needed for building a simple Shiny app.

Let's run through the process of building a custom Docker image on top of an existing rocker image. You need to do three things:

1) Create an empty file called `Dockerfile`. If the code for your Shiny app is located inside a folder called `app`, then the `Dockerfile` should be saved in the parent folder (so `Dockerfile` inside `.` and Shiny code inside `./app`)

2) Write the following commands to the Dockerfile and save it:

```
FROM rocker/shiny-verse:latest

COPY /app /srv/shiny-server/

EXPOSE 3838
```

3) Navigate to the folder where your `Dockerfile` is located with the command line tool of your choice and build the image based on the `Dockerfile`:

```
$ docker build --tag my-app:latest .
```

For phase 3), you can use the Command Prompt, or the Terminal which is available in either RStudio or Visual Studio Code. The advantage of using a built-in terminal from e.g. Visual Studio Code is that the terminal prompt is already opened in your working directory where you have saved your `Dockerfile`. Visual Studio Code also provides help for writing Dockerfiles via the Docker extension.

Let's take a closer look at the contents of that `Dockerfile` and what is actually happening. The first line of code tells Docker to build the image on top of a pre-existing image called `rocker/shiny-verse`. If that is not available locally, then Docker will search and pull the image from Docker Hub. The next line of code tells Docker to copy the contents of the local `app` folder on your computer inside the Docker image. There it will place the contents under `./srv/shiny-server/`. The `app` folder should contain all the code for your Shiny app. The last line of code declares that port 3838 of the container created based on this image should be exposed to the outside environment.

Now if we wish to run a container based on the image locally on our computer, we can do so with the following command:

```
$ docker run -p 3838:3838 -d --rm --name mycontainer my-app:latest
```

You should now find your containerized Shiny app by visiting `localhost:3838` on your web browser.

```{r}
#| fig-cap: "Shiny app running locally inside a container."
#| echo: false
knitr::include_graphics(path = "img/ShinyInDocker.png")
```


Once you are done using the app you can shutdown the container with:

```
$ docker stop mycontainer
```

This will also remove the container since we used the `--rm` flag when starting the container.

## Installing R packages

For example the `rocker/shiny-verse` image already includes many R-packages which have been installed. You can see information on different rocker images and their contents [here](https://github.com/rocker-org/rocker-versioned2/wiki).

However, something you might want to include other packages as well. 

### Installing custom R packages

## Using batch-files for launching a container

## Final thoughts

Joe Torres has a blog post detailing the steps needed for using Azure App service to [host your Shiny app](https://joetorres531.medium.com/build-an-enterprise-ready-r-shiny-app-with-azure-and-docker-a87c73028d97).